---
photo:
  id: String
  thumbUrl: String
  photoUrl: String
  webUrl: String
  width: Fixnum
  height: Fixnum
  updated: Date
  user: user
  latitude: Float
  longitude: Float
  totalLikes: Fixnum
  totalPeople: Fixnum
  totalComments: Fixnum
  description: String
  filter: String
  comments: comments
  likers: users
  people: people
  albums: albums
  liked: FalseClass
  blacklisted: FalseClass
  openEdit: open_edit
  submittedToMarket: FalseClass
  file_id: String
  market: marketItem
  releases: releases
  partnerStatus:
      Array: partner
  java_import_linkify:
    ImportMixin: com.eyeem.chips.Linkify
  java_init_entities:
    CtorMixin: |
      Utils.computeEntities(this);
      Utils.computePartners(this, json);
  java_entities:
    Mixin: |
      public Linkify.Entities entities = new Linkify.Entities();
      public String entityfiedDescription;
      public float getAspectRatio() { return height == 0 ? 0 : (float) width / (float) height; }
      @Override
      public boolean equals(Object o) {
         if (o instanceof Photo)
            return ((Photo) o).id.equals(id);
         else
            return super.equals(o);
      }
user:
  id: String
  nickname: String
  fullname: String
  webUrl: String
  thumbUrl: String
  photoUrl: String
  description: String
  following: FalseClass
  follower: FalseClass
  blocked: FalseClass
  restricted: FalseClass
  totalFollowers: Fixnum
  totalFriends: Fixnum
  totalPhotos: Fixnum
  totalLikedPhotos: Fixnum
  totalLikedAlbums: Fixnum
  coverPhoto: photo
  blacklisted: FalseClass
  marketTotals: market_totals
  file_id: String
  java_textUtils:
    ImportMixin: android.text.TextUtils
  java_fix_null_description:
    CtorMixin: if ("null".equals(description)) description = "";
  java_entities:
    Mixin: |
      @Override public boolean equals(Object user) {
      return user != null && (user instanceof User)
         && !TextUtils.isEmpty(id) && !TextUtils.isEmpty(((User) user).id)
         && id.equals(((User) user).id);
      }
      public String thumbUrl(int size) {
         return Utils.getSquareThumbnail(size, this);
      }
comments:
  offset: Fixnum
  limit: Fixnum
  total: Fixnum
  items:
    Array: comment
comment:
  id: String
  photoId: String
  message: String
  extendedMessage: String
  user: user
  updated: Date
  mentionedUsers:
    Array: user
  java_textUtils:
    ImportMixin: android.text.TextUtils
  java_entities:
    Mixin: |
      @Override public boolean equals(Object comment) {
      return comment != null && (comment instanceof Comment)
         && !TextUtils.isEmpty(id) && !TextUtils.isEmpty(((Comment) comment).id)
         && id.equals(((Comment) comment).id);
      }
users:
  offset: Fixnum
  limit: Fixnum
  total: Fixnum
  items:
    Array: user
people:
  offset: Fixnum
  limit: Fixnum
  total: Fixnum
  items:
    Array: person
person:
  nickname: String
  fullname: String
  thumbUrl: String
  serviceType: String
  serviceId: String
  facebook: FalseClass
  twitter: FalseClass
  file_id: String
  java_textUtils:
    ImportMixin: android.text.TextUtils
  java_urlException:
    ImportMixin: java.io.UnsupportedEncodingException
  java_URLEncoder:
    ImportMixin: java.net.URLEncoder
  java_ctor:
    CtorMixin: |
      if (!TextUtils.isEmpty(fullname))
        fullnameASCII = FlattenToASCII.removeDiacritic(fullname).toLowerCase();
  java_toString:
    Mixin: |
      @Override public boolean equals(Object person) {
      return person != null && (person instanceof Person)
         && !TextUtils.isEmpty(serviceId) && !TextUtils.isEmpty(((Person) person).serviceId)
         && serviceId.equals(((Person) person).serviceId);
      }
      public String fullnameASCII;
      @Override public String toString() {
            if (!TextUtils.isEmpty(fullname))
               return fullname;
            else if (!TextUtils.isEmpty(nickname))
               return nickname;
            else
               return "";
         }
      public String handle() {
      String name = "";
      if (serviceType.equals("eyeem") || serviceType.equals("facebook")) {
         name = fullname;
      } else if (serviceType.equals("twitter")) {
         name = nickname;
      }

      return serviceType + ":" + serviceId + ":" + name;
      }
albums:
  offset: Fixnum
  limit: Fixnum
  total: Fixnum
  items:
    Array: album
album:
  id: String
  name: String
  type: String
  coverPhoto: photo
  webUrl: String
  updated: Date
  location: location
  totalPhotos: Fixnum
  totalLikers: Fixnum
  totalContributors: Fixnum
  photos: photos
  hidden: FalseClass
  muted: FalseClass
  favorited: FalseClass
  subtitle: String
  blacklisted: FalseClass
  java_types:
    Mixin: |
      public final static String TYPE_CITY = "city";
      public final static String TYPE_VENUE = "venue";
      public final static String TYPE_EVENT = "event";
      public final static String TYPE_COUNTRY = "country";
      public final static String TYPE_TAG = "tag";
  java_textUtils:
    ImportMixin: android.text.TextUtils
  java_entities:
    Mixin: |
      @Override public boolean equals(Object album) {
      return album != null && (album instanceof Album)
         && !TextUtils.isEmpty(id) && !TextUtils.isEmpty(((Album) album).id)
         && id.equals(((Album) album).id);
      }
location:
  latitude: String
  longitude: String
  countryCode: String
  cityAlbum: album
  countryAlbum: album
  venueService: venue_service
venue_service:
  name: String
  categoryName: String
  category: String
  id: String
venue:
  name: String
  serviceId: String
  category: String
  categoryName: String
  venueServiceName: String
  categoryIcon: String
  sentences:
     Array: String
  java_import_iterator:
    ImportMixin: java.util.Iterator
  java_textUtils:
    ImportMixin: android.text.TextUtils
  java_init_topics:
    CtorMixin: |
      JSONObject topics = json.optJSONObject("topics");

      if (topics != null) {
         Iterator it = topics.keys();
         while (it.hasNext()) {
            try {
               String key = (String) it.next();
               String val = topics.optString(key);
               if (!TextUtils.isEmpty(key) && !TextUtils.isEmpty(val)) {
                  Topic t = new Topic();
                  t.name = val;
                  t.id = key;
                  this.topics.add(t);
               }
            } catch (Exception e) {
            }
         }
      }
  java_types:
    Mixin: |
      public ArrayList<Topic> topics = new ArrayList<Topic>();
      public boolean isCity;
      public boolean newLocation;
      public boolean noLocation;
      public double newLat;
      public double newLon;
photos:
  total: Fixnum
  limit: Fixnum
  offset: Fixnum
  items:
    Array: photo
topic:
  id: String
  name: String
  totalPhotos: Fixnum
contact:
  fullname: String
  nickname: String
  serviceId: String
  serviceType: String
  thumbUrl: String
  user: user
  file_id: String
mission:
  java_methods:
    Mixin: |
      public static final String STATUS_OPEN = "OPEN";
      public static final String STATUS_EXPIRED = "EXPIRED";
      public static final String STATUS_COMPLETED = "COMPLETED";
  id: String
  title: String
  partnerName: String
  startdate: Date
  deadline: Date
  prize: String
  prizeCaption: String
  terms: String
  brief: String
  description: String
  recap: String
  url: String
  thumbUrl: String
  headerPhoto: photo
  album: Album
  marketPhotos: FalseClass
  completed: FalseClass
  stickyMission: FalseClass
  filename: String
  position: Fixnum
  status: String
  samplePhotos:
    Array: photo
  winnerPhotos:
    Array: photo
  runnerupPhotos:
    Array: photo
  grandprizePhotos:
    Array: photo
search_result:
  totalUsers: Fixnum
  totalAlbums: Fixnum
  albums: albums
  users: users
collection:
  thumbUrl: String
  id: String
  albumIds:
    Array: String
  name: String
news_list:
  unseen: Fixnum
  total: Fixnum
  newestId: String
  oldestId: String
  items:
    Array: news
news:
  id: String
  ids:
    Array: String
  aggregation: aggregation
  comment: comment
  user: user
  album: album
  photo: photo
  body: String
  title: String
  cta: String
  url: String
  thumbUrl: String
  newsType: String
  seen: FalseClass
  updated: Date
  itemType: String
  mission: mission
  java_methods:
    Mixin: |
      public boolean hasAggregation() { return ids != null && ids.size() > 0 && aggregation != null; }

      // News types ===================================================================================
      public static final String TYPE_LIKE = "like";
      public static final String TYPE_FOLLOW = "follow";
      public static final String TYPE_COMMENT = "comment";
      public static final String TYPE_MENTION = "commentMention";
      public static final String TYPE_ALBUM_CONTRIBUTOR = "albumContributor";
      public static final String TYPE_INVITE = "albumInvite";
      public static final String TYPE_FOLLOW_FB = "fbFriend";
      public static final String TYPE_FOLLOW_TW = "twFriend";
      @Deprecated
      public static final String TYPE_COMMENT_AFTER = "commentAfter";
      public static final String TYPE_PHOTO_TAG = "taggedPerson";
      public static final String TYPE_BLOG_POST = "blogPost";
      public static final String TYPE_OTHER = "other";
      public static final String TYPE_PAGE = "page";
      public static final String TYPE_MARKET = "market";
      public static final String TYPE_GETTY_APPROVED = "gettyApproval";
      @Deprecated
      public static final String TYPE_SOLD = "sold";
      public static final String TYPE_PHOTO_SOLD = "photoSold";
      public static final String TYPE_PHOTO_SOLD_GETTY = "photoSoldGetty";

      // News item types ==============================================================================
      public static final String ITEM_TYPE_URL = "url";
      public static final String ITEM_TYPE_MISSION = "mission";
      public static final String ITEM_TYPE_PHOTO = "photo";
      public static final String ITEM_TYPE_USER = "user";
      public static final String ITEM_TYPE_ALBUM = "album";
      public static final String ITEM_TYPE_PROFILE = "profile";
      public static final String ITEM_TYPE_CAMERA = "camera";
      public static final String ITEM_TYPE_FRIENDS = "friends";
      public static final String ITEM_TYPE_DISCOVER = "discover";
      public static final String ITEM_TYPE_FIND_FRIENDS = "findfriends";

aggregation:
  total: Fixnum
  type: String
  users:
    Array: user
  photos:
    Array: photo
  albums:
    Array: album
  java_import:
    ImportMixin: java.util.List
  java_methods:
    Mixin: |
      public List list() {
        if (type.equals("user")) {
          return users;
        } else if (type.equals("photo")) {
          return photos;
        } else if (type.equals("album")) {
          return albums;
        }
        return java.util.Collections.emptyList();
      }
settings:
  filters_unlocked: FalseClass
  email_newsletter: FalseClass
  facebook_userfollow: FalseClass
  facebook_albumlike: FalseClass
  facebook_albumfavorite: FalseClass
  push_user_joined: FalseClass
  email_weekly_newsletter: FalseClass
  push_photo_like: FalseClass
  email_photo_comment: FalseClass
  email_photo_like: FalseClass
  onboarding_collections: FalseClass
  facebook_photodiscover: FalseClass
  facebook_photolike: FalseClass
  facebook_timeline_popup: FalseClass
  facebook_upload: FalseClass
  email_user_follower: FalseClass
  facebook_albumcontribution: FalseClass
  email_user_joined: FalseClass
  email_photo_comment_mention: FalseClass
  push_photo_comment: FalseClass
  push_photo_comment_mention: FalseClass
  facebook_photocomment: FalseClass
  push_user_follower: FalseClass
  show_nsfw_content: FalseClass
  account_market_seller: FalseClass
  account_market_buyer: FalseClass
  email_confirmed: FalseClass
  email_community_updates: FalseClass
  push_community_updates: FalseClass
  discover_content_global: FalseClass
  discover_content_local_de_de: FalseClass
  discover_content_local_de_en: FalseClass
  discover_content_local_es_es: FalseClass
  discover_content_local_es_en: FalseClass
  ab_skip_upload: FalseClass
  ab_new_home: FalseClass
services:
  flickr: service
  twitter: service
  google: service
  tumblr: service
  foursquare: service
  facebook: facebook_service
service:
  status: String
  id: String
  nickname: String
facebook_service:
  primary: FalseClass
  status: String
  publish_actions: FalseClass
  id: String
  third_party_id: String
  access_token: String
  managedPages:
    Array: facebook_page
  java_add_own_timeline:
      CtorMixin: |
        boolean containsMe = false;
        for (FacebookPage page : managedPages) {
          if ("me".equals(page.id)) {
            containsMe = true; break;
          }
        }
        if (!containsMe) {
           FacebookPage ownTimeline = new FacebookPage();
           ownTimeline.id = "me";
           managedPages.add(0, ownTimeline);
        }
facebook_page:
  id: String
  name: String
  posting: Fixnum
upload_spec:
  filename: String              # mandatory, obtained from MULTIPART POST /v2/photos/upload
  people:
    Array: String               # handle from Person object, handle = {serviceType + ":" + serviceId + ":" + name}
  description: String
  cc: String
  city: String
  venueId: String
  venueServiceName: String
  noLocation: String            # values: "0"|"1"
  services:
    Array: String
  originalFilename: String      # device local full path to the uploaded image before any transformations were applied
  filteredFilename: String      # iOS specific
  openEdit: open_edit
  market: String                # values: "0"|"1"
open_edit:
  version: String               # 1 (filter specification version)
  cropped: FalseClass
  rotated: FalseClass
  perspective: FalseClass
  transformations:
    Array: transformation
transformation:
  type: String                  # values: "adjustment"|"filter"
  name: String                  # e.g.: "capa", "fresh 1", "unsharp mask"
  params:
    Array: Float                # transformation defining values, most transformations should only have one value but this should be easily expandable
batch:
  id: String                    # String.valueOf(generated)
  title: String
  generated: Date
  cards: cards
  java_calculate_ids:
      CtorMixin: |
        com.eyeem.sdk.Utils.calculateBatchIds(this);
cards:
  items:
    Array: card
card:
  id: String                    # generated locally based of batch.generated or random
  items:
    Array: card_item
  created_at: Date
  type: String
  java_id:
      CtorMixin: |
        id = String.valueOf(java.util.UUID.randomUUID().getMostSignificantBits());
  java_methods:
    Mixin: |
      // Card types ===================================================================================
      public static final String TYPE_BLOG_POST = "blogPost";
      public static final String TYPE_FEATURED_USER = "featuredUser";
      public static final String TYPE_FEATURED_ALBUM = "featuredAlbum";
      public static final String TYPE_FEATURED_CITY = "featuredCity";
      public static final String TYPE_AROUND_YOU = "aroundYou";
      public static final String TYPE_POPULAR = "popular";
      public static final String TYPE_MISSION = "mission";
card_item:
  id: String
  title: String
  subtitle: String
  type: String
  blogPost: blog_post
  mission: mission
  photos:
    Array: photo
  user: user
  lat: String
  lng: String
  album: album
  java_id:
      CtorMixin: |
        id = com.eyeem.sdk.Utils.cardItemId(this);
blog_post:
  body: String
  category: String
  title: String
  thumbUrl: String
  url: String
  file_id: String
feed_item:
  id: String
  newPhotos: Fixnum
  type: String
  photo: photo
  photoGroup: photo_group
  album: album
  java_id:
      CtorMixin: |
        id = com.eyeem.sdk.Utils.feedItemId(this);
  java_methods:
    Mixin: |
      // Card types ===================================================================================
      public static final String TYPE_ALBUM = "album";
      public static final String TYPE_PHOTO = "photo";
      public static final String TYPE_PHOTO_GROUP = "photoGroup";
photo_group:
  sample:
    Array: photo
  photoIds:
    Array: String
  updated: Date
  userId: String
market_totals:
  editorial: Fixnum
  commercial: Fixnum
  getty: Fixnum
news2:
  headline: String
  action: String
  text: String
seller_data:
  accepted_tos: String
  account_type: String
  birthday: String
  city: String
  company: String
  country_iso: String
  created_at: String
  email: String
  first_name: String
  id: String
  last_name: String
  paypal_account_id: String
  phone: String
  state: String
  street1: String
  street2: String
  tax_id: String
  updated_at: String
  user_id: String
  verified: FalseClass
  zip: String
marketUser:
  id: String
  firstName: String
  lastName: String
  street1: String
  street2: String
  city: String
  state: String
  zip: String
  countryIso: String
  phone: String
  email: String
  birthday: String
  verified: String
  accountType: String
  taxId: String
  company: String
  user: user
task:
  id: String
  type: String
  description: description
  icon: String
  action: String
  new: Fixnum
  updatedAt: Date
  badge: badge
description:
  headline: String
  subline: String
badge:
  count: Fixnum
marketItem:
  id: String
  status: Fixnum
  modelStatus: Fixnum
  propertyStatus: Fixnum
  reviewStatus: Fixnum
  score: Fixnum
  modelAmount: Fixnum
  propertyAmount: Fixnum
  licenseRequest: FalseClass
  cantGetReleases: String
releases:
  is_private: String
  needs_model: String
  needs_propery: String
  is_underage: String
  property:
    Array: release
  model:
    Array: release
release:
  java_methods:
    Mixin: |
      // statuses ===================================================================================
      public static final String TYPE_MODEL = "MODEL";
      public static final String TYPE_PROPERTY = "PROPERTY";
      public static final String STATUS_NEEDED = "NEEDED";
      public static final String STATUS_REQUESTED = "REQUESTED";
      public static final String STATUS_CLEARED = "CLEARED";
      public static final String STATUS_DENIED = "DENIED";
  id: String
  uuid: String
  releaseType : String # MODEL, PROPERTY
  releaseUrl: String
  firstName: String
  lastName: String
  ownerFirstName: String
  ownerLastName: String
  status: String
  email: String
  link: String
  tagX1: Float
  tagX2: Float
  tagY1: Float
  tagY2: Float
  multiReleaseId: String
vision:
  aestheticsScore: Float
  fileId: String
  keywords:
    Array: String
partner:
  java_methods:
    Mixin: |
      // statuses ===================================================================================
      public static final String TYPE_SELECTED = "SELECTED";
      public static final String TYPE_SUBMITTED = "SUBMITTED";
      public static final String TYPE_ON_SALE = "ON_SALE";
      public static final String TYPE_FAILED = "FAILED";
      public static final String TYPE_REJECTED = "REJECTED";
      public static final String TYPE_REMOVED = "REMOVED";
  name: String
  status: String
payout:
  java_methods:
    Mixin: |
      public static final int STATUS_PENDING = 1;
      public static final int STATUS_REQUESTED = 2;
      public static final int STATUS_PROCESSING = 3;
      public static final int STATUS_PAID = 4;
      public static final int STATUS_FAILED = 5;
  id: String
  userId: String
  currency: String
  status: Fixnum
  createdAt: Date
  updatedAt: Date
  amount: Float
  paypalAddress: String
  payoutreceiptUrl: String
releaseRequest:
  id: String
  uuid: String
  releaseType : String # MODEL, PROPERTY
  status: String # NEEDED, REQUESTED, CLEARED
  firstName: String
  lastName: String
  email: String
  message: String
  birthdate: String
  gender: String # MALE, FEMALE, OTHER
  modelIdentity: String # SELF, MY_KID, OTHER
  parentFirstName: String
  parentLastName: String
  secondParentFirstName: String
  secondParentLastName: String
  street1: String
  street2: String
  city: String
  state: String
  countryIso: String
  zip: String
  phoneNumber: String
  ownerStreet1: String
  ownerStreet2: String
  ownerCompany: String
  ownerCity: String
  ownerState: String
  ownerCountryIso: String
  ownerZip: String
  ownerPhone: String
  ownerFirstName: String
  ownerLastName: String
  ownerEmail: String
  propertyDescription: String
  propertyStreet1: String
  propertyStreet2: String
  propertyCity: String
  propertyState: String
  propertyCountryIso: String
  propertyZip: String
  photos:
    Array: photo
geocode:
  countryIso: String  # e.g. DE
  name: String        # e.g. Berlin
  displayName: String # e.g. Berlin, Germany
  fsGeonameId: String # geonameid:2950159
  geometry: geometry
geometry:
  center: coords
coords:
  lat: Float
  lng: Float
mission2:
  java_methods:
    Mixin: |
      public static final String STATUS_IN_PREPARATION = "IN_PREPARATION";
      public static final String STATUS_READY_TO_LAUNCH = "READY_TO_LAUNCH";
      public static final String STATUS_RUNNING = "RUNNING";
      public static final String STATUS_SELECTING_WINNERS = "SELECTING_WINNERS";
      public static final String STATUS_COMPLETED = "COMPLETED";
  id: String # e.g. "ef400bae-ddea-49bf-a3eb-24e636d971e1",
  partnerName: String # e.g. "Google Pixel 2",
  startDate: Date # String "2018-06-06T01:00:00Z"
  endDate: Date # "2018-08-01T01:00:00Z"
  status: String # "RUNNING"
  brandLogoUrl: String # "https://www.eyeem.com/blog/wp-content/uploads/2018/06/mission-logo.png",
  tosLink: String # "https://goo.gl/cYjau3",
  marketOnly: FalseClass
  sticky: FalseClass
  position: Fixnum
  previewable: Fixnum
  blogUrl: String
  samplePhotoLightboxId: String
  winnerPhotos:
    Array: photo
  runnerupPhotos:
    Array: photo
  grandprizePhotos:
    Array: photo
  backgroundImageId: String
  albumId: String
  missionTitle: String
  locale: String
  description: String
  prizeTitle: String
  prizeDescription: String
  backgroundImage: photo
  do:
    Array: String
  dont:
    Array: String
  createdAt: Date
  updatedAt: Date
lightbox:
  id: String
  userId: String
  name: String
  createdAt: Date
  lastUserUpdatedAt: Date
  totalPhotos: Fixnum
  photos: photos
